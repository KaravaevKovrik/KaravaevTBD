вычисление средней оценки по заданному предмету для заданной группы

DELIMITER $$
CREATE FUNCTION avg_grade_by_subject_group(subject_id INT, group_id INT)
RETURNS FLOAT
DETERMINISTIC
BEGIN
    DECLARE avg_grade FLOAT;
    
    SELECT AVG(grade)
    INTO avg_grade
    FROM grades 
    JOIN students ON grades.student_id = students.id
    JOIN groups ON students.group_id = groups.id
    WHERE grades.subject_id = subject_id 
    AND groups.id = group_id
    AND grades.grade IS NOT NULL;
    
    RETURN avg_grade;
END$$
DELIMITER ;



SELECT avg_grade_by_subject_group(1, 2) AS avg_grade_for_group;



-----------------------------------------------------------------------------------------------------------------
вычисление средней оценки по заданному предмету для заданного направления

DELIMITER $$ 
CREATE FUNCTION avg_grade_by_subject_direction(subject_id INT, direction_id INT)
RETURNS FLOAT
DETERMINISTIC
BEGIN
    DECLARE avg_grade FLOAT;
    
    SELECT AVG(grade)
    INTO avg_grade
    FROM grades
    JOIN students ON grades.student_id = students.id
    JOIN groups ON students.group_id = groups.id
    WHERE grades.subject_id = subject_id 
    AND groups.direction_id = direction_id
    AND grades.grade IS NOT NULL;
    
    RETURN avg_grade;
END$$
DELIMITER ;



SELECT avg_grade_by_subject_direction(1, 1) AS avg_grade_for_direction;



-----------------------------------------------------------------------------------------------------------------
вычисление количества отличников в заданной группе

DELIMITER $$ 
CREATE FUNCTION count_excellent_students(group_id INT)
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE excellent_count INT;
    
    SELECT COUNT(DISTINCT students.id)
    INTO excellent_count
    FROM students
    JOIN grades ON students.id = grades.student_id
    JOIN groups ON students.group_id = groups.id
    WHERE groups.id = group_id
    AND (grades.grade = 5)  
    AND grades.grade IS NOT NULL;
    
    RETURN excellent_count;
END$$
DELIMITER ;



SELECT count_excellent_students(2) AS excellent_students_in_group;



-----------------------------------------------------------------------------------------------------------------
проверка наличия несданных экзаменов у студента

DELIMITER $$ 
CREATE FUNCTION has_unsatisfactory_exams(student_id INT)
RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    DECLARE result BOOLEAN;
    
    SELECT CASE 
        WHEN EXISTS (
            SELECT 1 
            FROM grades 
            WHERE student_id = student_id 
            AND (grade = 2 OR grade IS NULL)
        ) THEN TRUE
        ELSE FALSE
    END
    INTO result;
    
    RETURN result;
END$$
DELIMITER ;



SELECT has_unsatisfactory_exams(1) AS has_unsatisfactory;



-----------------------------------------------------------------------------------------------------------------
количество пропущенных занятий для каждого студента

DELIMITER $$ 
CREATE FUNCTION missed_classes_for_student(student_id INT)
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE missed_count INT;
    
    SELECT COUNT(*) 
    INTO missed_count
    FROM student_attendance
    WHERE student_id = student_id AND attended = FALSE;
    
    RETURN missed_count;
END$$
DELIMITER ;



SELECT missed_classes_for_student(1) AS missed_classes_by_student;



-----------------------------------------------------------------------------------------------------------------
количество пропущенных занятий для каждой группы

DELIMITER $$ 
CREATE FUNCTION missed_classes_for_group(group_id INT)
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE missed_count INT;
    
    SELECT COUNT(*) 
    INTO missed_count
    FROM student_attendance
    JOIN students ON student_attendance.student_id = students.id
    WHERE students.group_id = group_id AND student_attendance.attended = FALSE;
    
    RETURN missed_count;
END$$
DELIMITER ;



SELECT missed_classes_for_group(2) AS missed_classes_by_group;



-----------------------------------------------------------------------------------------------------------------
количество пропущенных занятий для каждого направления

DELIMITER $$ 
CREATE FUNCTION missed_classes_for_direction(direction_id INT)
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE missed_count INT;
    
    SELECT COUNT(*) 
    INTO missed_count
    FROM student_attendance
    JOIN students ON student_attendance.student_id = students.id
    JOIN groups ON students.group_id = groups.id
    WHERE groups.direction_id = direction_id AND student_attendance.attended = FALSE;
    
    RETURN missed_count;
END$$
DELIMITER ;



SELECT COUNT(*) AS missed_classes_by_direction FROM student_attendance JOIN students ON student_attendance.student_id = students.id
JOIN groups ON students.group_id = groups.id WHERE groups.direction_id = 1 AND student_attendance.attended = FALSE;



-----------------------------------------------------------------------------------------------------------------
количество пропущенных занятий для каждого преподавателя

DELIMITER $$ 
CREATE FUNCTION missed_classes_for_teacher(teacher_id INT)
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE missed_count INT;
    
    SELECT COUNT(*) 
    INTO missed_count
    FROM student_attendance
    WHERE student_attendance.teacher_id = teacher_id AND student_attendance.attended = FALSE;
    
    RETURN missed_count;
END$$
DELIMITER ;



SELECT COUNT(*) AS missed_classes_by_teacher FROM student_attendance WHERE teacher_id = 1 AND attended = FALSE;

