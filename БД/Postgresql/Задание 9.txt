проверка корректности выставляемой оценки


CREATE OR REPLACE FUNCTION check_grade_validity() 
RETURNS TRIGGER AS $$
BEGIN
    IF NOT (NEW.grade IN (2, 3, 4, 5) OR NEW.grade IS NULL) THEN
        RAISE EXCEPTION 'Оценка должна быть 2, 3, 4 или 5, или отсутствовать';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER check_grade_validity_trigger
BEFORE INSERT ON grades
FOR EACH ROW EXECUTE FUNCTION check_grade_validity();


INSERT INTO grades (student_id, subject_id, grade, teacher_id)
VALUES (1, 1, 1, 1); 

-----------------------------------------------------------------------------------------------------------------
корректность выставляемой оценки преподавателем


CREATE OR REPLACE FUNCTION validate_grade() 
RETURNS TRIGGER AS $$
DECLARE teacher_count INT;
BEGIN
    SELECT COUNT(*) INTO teacher_count FROM subjects WHERE id = NEW.subject_id AND teacher_id = NEW.teacher_id;

    IF teacher_count = 0 THEN
        RAISE EXCEPTION 'Преподаватель не может выставить оценку по этому предмету';
    END IF;

    IF NEW.grade NOT IN (2, 3, 4, 5) THEN
        RAISE EXCEPTION 'Недопустимая оценка. Допустимы только 2, 3, 4, 5';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER validate_grade_trigger
BEFORE INSERT ON grades
FOR EACH ROW EXECUTE FUNCTION validate_grade();


INSERT INTO grades (student_id, subject_id, grade, teacher_id)
VALUES (1, 1, 5, 2); 

-----------------------------------------------------------------------------------------------------------------
среднее значения оценок группы по предмету


CREATE TABLE group_subject_avg (
    group_id INT,
    subject_id INT,
    avg_grade FLOAT,
    PRIMARY KEY (group_id, subject_id)
);


CREATE OR REPLACE FUNCTION update_group_subject_avg() 
RETURNS TRIGGER AS $$
DECLARE new_avg FLOAT; student_group_id INT;
BEGIN
    SELECT group_id INTO student_group_id FROM students WHERE id = NEW.student_id;

    SELECT AVG(grade) INTO new_avg
    FROM grades
    JOIN students ON grades.student_id = students.id
    WHERE grades.subject_id = NEW.subject_id
    AND students.group_id = student_group_id
    AND grades.grade IS NOT NULL;

    INSERT INTO group_subject_avg (group_id, subject_id, avg_grade)
    VALUES (student_group_id, NEW.subject_id, new_avg)
    ON CONFLICT (group_id, subject_id) DO UPDATE SET avg_grade = new_avg;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_group_subject_avg_trigger
AFTER INSERT ON grades
FOR EACH ROW EXECUTE FUNCTION update_group_subject_avg();


INSERT INTO grades (student_id, subject_id, grade, teacher_id)
VALUES (1, 1, 5, 1); 



SELECT * FROM group_subject_avg;



-----------------------------------------------------------------------------------------------------------------
вычисление и сохранение среднего значения оценок группы по всем предметам


CREATE TABLE group_avg (
    group_id INT,
    avg_grade FLOAT,
    PRIMARY KEY (group_id)
);


CREATE OR REPLACE FUNCTION update_group_avg() 
RETURNS TRIGGER AS $$
DECLARE new_avg FLOAT;
BEGIN
    SELECT AVG(grade) INTO new_avg FROM grades JOIN students ON grades.student_id = students.id WHERE students.group_id = NEW.group_id AND grades.grade IS NOT NULL;

    INSERT INTO group_avg (group_id, avg_grade)
    VALUES (NEW.group_id, new_avg)
    ON CONFLICT (group_id) DO UPDATE SET avg_grade = new_avg;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_group_avg_trigger
AFTER INSERT ON grades
FOR EACH ROW EXECUTE FUNCTION update_group_avg();

INSERT INTO grades (student_id, subject_id, grade, teacher_id)
VALUES (2, 2, 4, 1);



SELECT * FROM group_avg;



-----------------------------------------------------------------------------------------------------------------
вычисление и сохранение среднего значения оценок по предмету


CREATE TABLE subject_avg (
    subject_id INT,
    avg_grade FLOAT,
    PRIMARY KEY (subject_id));

CREATE OR REPLACE FUNCTION update_subject_avg() 
RETURNS TRIGGER AS $$
DECLARE new_avg FLOAT;
BEGIN
    SELECT AVG(grade) INTO new_avg FROM grades WHERE subject_id = NEW.subject_id AND grade IS NOT NULL;

    INSERT INTO subject_avg (subject_id, avg_grade) VALUES (NEW.subject_id, new_avg)
    ON CONFLICT (subject_id) DO UPDATE SET avg_grade = new_avg;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER update_subject_avg_trigger
AFTER INSERT ON grades
FOR EACH ROW EXECUTE FUNCTION update_subject_avg();

INSERT INTO grades (student_id, subject_id, grade, teacher_id)
VALUES (3, 1, 3, 1); 



SELECT * FROM subject_avg;

